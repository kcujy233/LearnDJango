1. 创建DJango项目
在对应的文件夹下执行命令
django-admin.exe startproject Project_Name
则创建项目
2. 默认项目文件介绍
· manage.py
- 项目的管理、启动的管理、创建app、数据管理
- 默认不用增改代码
·· __init__.py
·· settings.py
-- 项目的配置文件
-- 连接数据库、注册app等
-- *多用来修改的文件
·· urls.py
-- 存放全部链接和函数的对应关系
-- *多用来修改的文件
·· asgi.py
-- 接收网络请求，异步
-- 一般不用增改代码
·· wsgi.py
-- 接收网络请求，同步
-- 一般不用增改代码
3. APP
- 项目
-- app1，用户管理
-- app2，订单管理
-- app3，网站
-- app4，API
...
各个APP可以负责不同的模块，拥有独立的表结构、函数、HTML模板、CSS
一般不相互影响
简洁开发用不上APP，一般服务于大型项目，一般一个项目一个APP即可
· 创建APP
在对应目录下的终端输入python manage.py startapp APP_name
即可创建APP
· 目录文件介绍
·· __init__.py
·· admin.py
-- django默认提供了admin后台管理，固定不用动
·· apps.py
-- app启动的类，固定不用动
·· models.py
-- **对数据库进行操作，用orm封装处理数据库
·· test.py
-- 单元测试，固定不用动
·· views.py
-- **URL定义的函数需要在这里编写
·· migrations
-- 数据库变更记录，固定不用动
··· __init__.py
4. 快速上手
4.1 启动项目
· 确保APP已注册
在settings.py的INSTALLED_APPS的列表里添加APP内容
添加的内容为”APP_NAME.apps.APP_NAMEConfig“
具体表示为在APP_NAME下的apps.py文件中的APP_NAMEConfig类
· 编写URL和视图函数的对应关系
在urls.py中编写
为urlpatterns列表中的每个结果
每个path("URL_NAME", 访问链接时执行的函数)
函数需要提前在urls.py中导入：from APP_NAME import views
· 编写视图函数
在APP中的views.py中编写
** 编写函数的输入必须得是”request“
** request是一个对象，包含用户通过浏览器发送的所有数据
· 启动DJango项目
在命令行输入： python manage.py runserver
4.2 templates模板
· 根据APP目录下的注册顺序逐一寻找符合文件名要求的文件
·· 可以在manage.py中设置优先查找的目录
4.3 静态文件
开发过程中一般将图片、CSS、JS当作静态文件处理
在DJango中可以通过{% load static %}直接引入静态目录
然后在链接地址填写对应链接，比如：
<img src="{% static 'img/aa.jpg' %}" alt="">
5. 模板语法（DJango的语法）
本质上就是在HTML中写占位符，由数据对占位符进行替换
· 视图函数编写
name = "aaa"
render(request,"HTML.html",{"n1":name})
· HTML占位符编写
<div>{{ n1 }}</div>
- 即可实现数据替换
- 如果变量是一个列表，想在HTML中显示对应元素
<div>{{ n1.0 }}</div>
<div>{{ n1.1 }}</div>
- 如果变量是一个字典，想在HTML中显示对应值
<div>{{ n1.name }}</div>
...
6. 请求和响应
** request是一个对象，包含用户通过浏览器发送的所有数据
· request.method//获取请求方式
· request.GTE//获取在url中传递的参数
· request.POST//获取返回的表单
·· request.POST.get("user")//获取返回内容中键所对应的值
· return HttpResponse("返回内容")//返回一个字符串
· return render(request, "sample_html")//返回一个页面
· return redirect("http://other.web")//重定向到其他页面
· 在HTML中执行form表单提交，需要在表单中额外增加验证
<form>
{% csrf_token %}
<input>
</form>
这样才能成功提交表单
7. 数据库操作
ORM框架：起到翻译功能，将代码翻译成连接数据库工具的语言（如pymysql），并由工具进行交互
7.1 安装第三方模块
mysqlclient --数据库连接工具
因为pymysql新版存在可能的编译错误
7.2 ORM
优势：
· 创建、修改和删除数据库中的表（**只能创建数据表，不能创建数据库）
· 操作表中的数据
1）创建数据库
在MySQL中创建
2）链接数据库
在settings.py中进行配置和修改
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 默认
        'NAME': 'DJango_sql',  # 连接的数据库  #一定要存在的数据库名
        'HOST': '127.0.0.1',  # mysql的ip地址
        'PORT': 3306,  # mysql的端口
        'USER': 'root',  # mysql的用户名
        'PASSWORD': ''  # mysql的密码
    }
}
3）创建表
· 在models.py中创建类
ORM会通过创建的类在数据库中创建数据表
class UserInfo(models.Model):
    name = models.CharField(max_length=32)
    password = models.CharField(max_length=64)
    age = models.IntegerField()
    size = models.IntegerField(default=2)
    data = models.IntegerField(null=True, blank=True)
    '''
    create table app01_userinfo(
        id bigint auto_increment primary key,
        name varchar(32),
        password varchar(64),
        age int
        )
    '''
· 执行命令：python .\manage.py makemigrations
python .\manage.py migrate
更新DJango链接
· 如果想新增列，可以通过设置：
    size = models.IntegerField(default=2)
    data = models.IntegerField(null=True, blank=True)
4）新增数据
Table.objects.create(LIE_NAME = "aaa")//增加某一列的一行数据
== insert into Table(LIE_NAME)values("aaa");
5）删除数据
Table.objects.filter(id=3).delete()//删除id=3的数据，filter为条件筛选
Table.objects.all().delete()//删除所有数据
6）获取数据
Table.objects.all()//获取所有数据，为QuerySet类型，可以理解成获取为一个列表
Table.objects.filter(id=3)
Table.objects.filter(id=3).first()
7）更新数据
Table.objects.all().update(LIE_NAME=999)//获取所有数据，并更新
Table.objects.filter(id=3).update(age=19)//

--- 案例：用户管理 ---
1. 展示用户列表
· url
· 函数
·· 从数据库获取用户信息
·· HTML渲染
2. 添加用户
· url
· 函数
·· GET看到页面
·· POST提交请求->写入数据库
3. 删除用户
