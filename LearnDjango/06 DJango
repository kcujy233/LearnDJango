1. 创建DJango项目
在对应的文件夹下执行命令
django-admin.exe startproject Project_Name
则创建项目
2. 默认项目文件介绍
· manage.py
- 项目的管理、启动的管理、创建app、数据管理
- 默认不用增改代码
·· __init__.py
·· settings.py
-- 项目的配置文件
-- 连接数据库、注册app等
-- *多用来修改的文件
·· urls.py
-- 存放全部链接和函数的对应关系
-- *多用来修改的文件
·· asgi.py
-- 接收网络请求，异步
-- 一般不用增改代码
·· wsgi.py
-- 接收网络请求，同步
-- 一般不用增改代码
3. APP
- 项目
-- app1，用户管理
-- app2，订单管理
-- app3，网站
-- app4，API
...
各个APP可以负责不同的模块，拥有独立的表结构、函数、HTML模板、CSS
一般不相互影响
简洁开发用不上APP，一般服务于大型项目，一般一个项目一个APP即可
· 创建APP
在对应目录下的终端输入python manage.py startapp APP_name
即可创建APP
· 目录文件介绍
·· __init__.py
·· admin.py
-- django默认提供了admin后台管理，固定不用动
·· apps.py
-- app启动的类，固定不用动
·· models.py
-- **对数据库进行操作，用orm封装处理数据库
·· test.py
-- 单元测试，固定不用动
·· views.py
-- **URL定义的函数需要在这里编写
·· migrations
-- 数据库变更记录，固定不用动
··· __init__.py
4. 快速上手
4.1 启动项目
· 确保APP已注册
在settings.py的INSTALLED_APPS的列表里添加APP内容
添加的内容为”APP_NAME.apps.APP_NAMEConfig“
具体表示为在APP_NAME下的apps.py文件中的APP_NAMEConfig类
· 编写URL和视图函数的对应关系
在urls.py中编写
为urlpatterns列表中的每个结果
每个path("URL_NAME", 访问链接时执行的函数)
函数需要提前在urls.py中导入：from APP_NAME import views
· 编写视图函数
在APP中的views.py中编写
** 编写函数的输入必须得是”request“
** request是一个对象，包含用户通过浏览器发送的所有数据
· 启动DJango项目
在命令行输入： python manage.py runserver
4.2 templates模板
· 根据APP目录下的注册顺序逐一寻找符合文件名要求的文件
·· 可以在manage.py中设置优先查找的目录
4.3 静态文件
开发过程中一般将图片、CSS、JS当作静态文件处理
在DJango中可以通过{% load static %}直接引入静态目录
然后在链接地址填写对应链接，比如：
<img src="{% static 'img/aa.jpg' %}" alt="">
5. 模板语法（DJango的语法）
本质上就是在HTML中写占位符，由数据对占位符进行替换
· 视图函数编写
name = "aaa"
render(request,"HTML.html",{"n1":name})
· HTML占位符编写
<div>{{ n1 }}</div>
- 即可实现数据替换
- 如果变量是一个列表，想在HTML中显示对应元素
<div>{{ n1.0 }}</div>
<div>{{ n1.1 }}</div>
- 如果变量是一个字典，想在HTML中显示对应值
<div>{{ n1.name }}</div>
...
6. 请求和响应
** request是一个对象，包含用户通过浏览器发送的所有数据
· request.method//获取请求方式
· request.GTE//获取在url中传递的参数
· request.POST//获取返回的表单
·· request.POST.get("user")//获取返回内容中键所对应的值
· return HttpResponse("返回内容")//返回一个字符串
· return render(request, "sample_html")//返回一个页面
· return redirect("http://other.web")//重定向到其他页面
· 在HTML中执行form表单提交，需要在表单中额外增加验证
<form>
{% csrf_token %}
<input>
</form>
这样才能成功提交表单
7. 数据库操作
ORM框架：起到翻译功能，将代码翻译成连接数据库工具的语言（如pymysql），并由工具进行交互
7.1 安装第三方模块
mysqlclient --数据库连接工具
因为pymysql新版存在可能的编译错误
7.2 ORM
优势：
· 创建、修改和删除数据库中的表（**只能创建数据表，不能创建数据库）
· 操作表中的数据
1）创建数据库
在MySQL中创建
2）链接数据库
在settings.py中进行配置和修改
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 默认
        'NAME': 'DJango_sql',  # 连接的数据库  #一定要存在的数据库名
        'HOST': '127.0.0.1',  # mysql的ip地址
        'PORT': 3306,  # mysql的端口
        'USER': 'root',  # mysql的用户名
        'PASSWORD': ''  # mysql的密码
    }
}
3）创建表
· 在models.py中创建类
ORM会通过创建的类在数据库中创建数据表
class UserInfo(models.Model):
    name = models.CharField(max_length=32)
    password = models.CharField(max_length=64)
    age = models.IntegerField()
    size = models.IntegerField(default=2)
    data = models.IntegerField(null=True, blank=True)
    '''
    create table app01_userinfo(
        id bigint auto_increment primary key,
        name varchar(32),
        password varchar(64),
        age int
        )
    '''
· 执行命令：python .\manage.py makemigrations
python .\manage.py migrate
更新DJango链接
· 如果想新增列，可以通过设置：
    size = models.IntegerField(default=2)
    data = models.IntegerField(null=True, blank=True)
4）新增数据
Table.objects.create(LIE_NAME = "aaa")//增加某一列的一行数据
== insert into Table(LIE_NAME)values("aaa");
5）删除数据
Table.objects.filter(id=3).delete()//删除id=3的数据，filter为条件筛选
Table.objects.all().delete()//删除所有数据
6）获取数据
Table.objects.all()//获取所有数据，为QuerySet类型，可以理解成获取为一个列表
Table.objects.filter(id=3)
Table.objects.filter(id=3).first()
7）更新数据
Table.objects.all().update(LIE_NAME=999)//获取所有数据，并更新
Table.objects.filter(id=3).update(age=19)//

--- 案例：用户管理 ---
1. 展示用户列表
· url
· 函数
·· 从数据库获取用户信息
·· HTML渲染
2. 添加用户
· url
· 函数
·· GET看到页面
·· POST提交请求->写入数据库
3. 删除用户

--- 案例：员工管理系统 ---
1. 创建项目
django-admin.exe startproject Project_Name
2. 创建APP
cd Project_Name
python manage.py startapp APP_name
3. APP注册
在settings.py的INSTALLED_APPS的列表里添加APP内容
添加的内容为”APP_NAME.apps.APP_NAMEConfig“
4. 设计表结构
在models.py中创建类，创建多个类，表示多个数据表
class UserInfo(models.Model):
*** 需要考虑联表的情况 ***
*** 需要考虑约束的情况 ***
5. 在MySQL中生成表
· 工具链接生成数据库
create database django_mysql_2 DEFAULT CHARSET utf8 COLLATE utf8_general_ci;
use django_mysql_2
· 修改配置文件settings.py，链接mysql
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 默认
        'NAME': 'django_mysql_2',  # 连接的数据库  #一定要存在的数据库名
        'HOST': '127.0.0.1',  # mysql的ip地址
        'PORT': 3306,  # mysql的端口
        'USER': 'root',  # mysql的用户名
        'PASSWORD': ''  # mysql的密码
    }
}
· DJango命令生成表
python .\manage.py makemigrations
python .\manage.py migrate
6. 静态文件管理
创建相关目录
7. 部门管理
-- 体验，最原始方法
-- DJango中提供Form和ModelForm组件
7.1 部门列表
· 创建url
· 创建views视图函数
· 创建html
·· 链接CSS组件，bootstrap
{% load static %}
<link rel="stylesheet" href="{% static 'plugins/bootstrap-3.4.1/css/bootstrap.min.css' %}">
<script src="{% static 'js/jquery-3.7.1.js' %}"></script>
<script src="{% static 'plugins/bootstrap-3.4.1/js/bootstrap.min.js' %}"></script>
·· 找到对应模板
· 连接数据库读取文件，获取部门列表，在views.py文件中导入
queryset = models.Department.objects.all()
· 将数据导入DJango中
{"queryset":queryset}
{% for obj in queryset %}
    <tr>
        <th>{{obj.id}}</th>
        <td>{{obj.title}}</td>
        <td>
            <a class="btn btn-primary btn-xs" href="">编辑</a>
            <a class="btn btn-danger btn-xs" href="">删除</a>
        </td>
    </tr>
{% endfor %}
· 添加页面
·· 创建url
·· 编写视图函数
    if request.method == "GET":
        return render(request, 'depart_add.html')
·· 创建表单
<form method="post">
    {% csrf_token %}

    <button type="submit" class="btn btn-default">保 存</button>
</form>
·· 获取数据
title = request.POST.get("title")
models.Department.objects.create(title=title)
· 删除数据
·· 创建url
·· 编写视图函数
nid = request.GET.get('nid')
models.Department.objects.filter(id=nid).delete()
·· 编写HTML链接
href="/depart/delete/?nid={{obj.id}}"
·· 重定向
return redirect("/depart/list/")
· 修改数据
·· 创建url，可以使用正则表达式
path("depart/<int:nid>/edit/", views.depart_edit),
·· 编写视图函数
def depart_edit(request, nid):
    total_info = models.Department.objects.filter(id=nid).first()
    title = total_info.title
    return render(request, "depart_edit.html", {"title":title})
·· 编写HTML链接
href="/depart/{{obj.id}}/edit/"
value="{{ title }}"
·· 回传数据库
title = request.POST.get("title")
models.Department.objects.filter(id=nid).update(title=title)

7.2 用户列表
· 创建url
· 创建views视图函数
· 创建html//模板继承
*** 时间的规范 ***
python:obj.create_time.strftime("%Y-%m-%d")
DJango:{{obj.create_time|date:"Y-m-d H:i:s"}}
*** 元组链接的规范 ***
python:obj.get_gender_display()
DJango:{{obj.get_gender_display}}
*** 数据表链接的规范 ***
python:obj.departID.title
DJango:{{obj.departID.title}}
** 使用原始方法的弊端 **
当数据列表很大，原始方法依次传入的时候，数据校验工作量很大，即需要针对每个字段进行如“非空判断”
并且该方法没有进行错误提示
工作量大，页面上每个字段都要进行重复填写
如果有管理数据，需要检索数据表，手动获取并循环展示
所以需要使用组件，跳转** 9. Form和ModelForm **




8. 模板的继承
编写一个模板HTML：layout.html
在某个div内增加如下内容
{% block BLOCK_NAME %}{% endblock %}
其他HTML页面可以直接继承模板，编写的内容相当于在上述框格内部
子模板：index.html中直接写如下内容
{% extends 'layout.html' %}
{% block BLOCK_NAME %}

{% endblock %}

9. Form和ModelForm
9.1 Form
1）创建类并继承(views.py)
class MyForm(Form):
    user=forms.CharField(widget=forms.Input)//定义格式，在HTML展示为Input框
    pwd = forms.CharField(widget=forms.Input)
    email = forms.CharField(widget=forms.Input)

def user_add(request):
    if request.method=="GET":
        form = MyForm()//实例化一个对象
        return render(request, "user_add.html", {"form":form})
2）辅助生成input表单（HTML）
<form method="post">
    {{form.user}}
    {{form.pwd}}
    {{form.email}}
</form>
或
<form method="post">
    {% for field in form %}
        {{field}}
    {% endfor %}
</form>

9.2 ModelForm
1）models.py
class UserInfo(models.Model):
    '''员工表'''
    name = models.CharField(verbose_name='姓名', max_length=16)
    passwd = models.CharField(verbose_name='密码', max_length=64)
    age = models.IntegerField(verbose_name='年龄')
    salary = models.DecimalField(verbose_name='账户余额',
                                 max_digits=10, decimal_places=2,
                                 default=0)# 最大位数10，小数2位，默认账户余额为0
    create_time = models.DateTimeField(verbose_name='入职时间')
    departID = models.ForeignKey(to='Department', to_field='id',
                                 on_delete=models.CASCADE)
    gender_choices=(
        (1, "male"),
        (2, "female"),
    )
    gender = models.SmallIntegerField(verbose_name='性别', choices=gender_choices)
2）views.py
class MyModelForm(ModelForm):
    class Meta:
        model = UserInfo//直接继承之前的”员工表“的类
        fields = ["name", "passwd"]//自定义需要的字段
3）HTML
{% csrf_token %}
{{form.name.label}}:{{form.name}}
{{form.passwd.label}}:{{form.passwd}}
{{form.age.label}}:{{form.age}}
或
{% for field in form %}
    {{field.label}}:{{field}}
{% endfor %}
** 由于使用departID时输出结果的问题，针对Department类进行重构 **
def __str__(self):
    return self.title
4）继承样式
在views.py中编写：
class UserModelForm(forms.ModelForm):
    class Meta:
        model = models.UserInfo
        fields = ["name", "passwd", "age", "salary", "create_time", "gender", "departID"]
        widgets = {
            "name":forms.TextInput(attrs={"class":"form-control"}),
            "passwd":forms.PasswordInput(attrs={"class":"form-control"})
        }
或者
def __init__(self, *args, **kwargs):
    super().__init__(*args, **kwargs)
    for name, field in self.fields.items():
        print(name, field)
        field.widget.attrs = {"class": "form-control",
                              "placeholder":field.label}
5）数据验证并保存
· 数据验证
form = UserModelForm(data=request.POST)
if form.is_valid():
    print(form.cleaned_data)
else:
    print(form.errors)
· 数据提交
form.save()
· 错误信息
{{field.errors.0}}
* 如果要调整显示中文，在settings.py文件中，更改LANGUAGE_CODE = "zh-hans" *